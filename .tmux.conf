# change prefix to Ctrl-a (like in gnu-screen)

# Set prefix to Ctrl-Space
unbind C-b
set -g prefix C-Space
bind C-Space send-prefix

# reload config file (change file location to your the tmux.conf you want to use)
bind r source-file ~/.tmux.conf


# split panes using | and -
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
unbind '"'
unbind %

# add colors
set -g default-terminal "screen-256color"
#set -as terminal-overrides ",gnome*:Tc"
set -ag terminal-overrides ",xterm-256color:RGB"

# add mouse support
set -g mouse on

# start window numbers from 1
set -g base-index 1

# switch panes using Alt-arrow without prefix
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D


# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'catppuccin/tmux'
set -g @plugin 'sainnhe/tmux-fzf'

bind-key J resize-pane -D 5
bind-key K resize-pane -U 5
bind-key H resize-pane -L 5
bind-key L resize-pane -R 5

bind-key M-j resize-pane -D
bind-key M-k resize-pane -U
bind-key M-h resize-pane -L
bind-key M-l resize-pane -R


bind -n S-Left  previous-window
bind -n S-Right next-window

# Border style
set -g pane-active-border-style fg=colour208,bg=default
set -g pane-border-lines "heavy"

set -g history-limit 10000
set -g focus-events on
#set -g status-bg black
#set -g status-fg white
#set -g status-interval 60
#set -g status-left-length 30
#set -g status-left '#[fg=green](#S) #(whoami)'
#set -g status-right '#[fg=yellow]#(cut -d " " -f 1-3 /proc/loadavg)#[default] #[fg=white]%H:%M#[default]'

set -g @catppuccin_window_left_separator "█"
set -g @catppuccin_window_right_separator "█ "
set -g @catppuccin_window_middle_separator "█ "
set -g @catppuccin_window_number_position "left"

set -g @catppuccin_window_default_fill "number"
set -g @catppuccin_window_default_text "#W"

set -g @catppuccin_window_current_fill "number"
set -g @catppuccin_window_current_text "#W"

set -g @catppuccin_status_modules_right "directory user host session"
set -g @catppuccin_status_left_separator  " █"
set -g @catppuccin_status_right_separator "█ "
set -g @catppuccin_status_right_separator_inverse "no"
set -g @catppuccin_status_fill "icon"
set -g @catppuccin_status_connect_separator "no"

set -g @catppuccin_directory_text "#{pane_current_path}"

# Prepare propper copy&paste
setw -g mode-keys vi

set -s set-clipboard on

# Mouse double clicking puts the double clicked word into clipboard
bind-key -T copy-mode-vi DoubleClick1Pane \
    select-pane \; \
    send-keys -X select-word-no-clear \; \
    send-keys -X copy-pipe-no-clear "xclip -in -sel primary"
bind-key -n DoubleClick1Pane \
    select-pane \; \
    copy-mode -M \; \
    send-keys -X select-word \; \
    send-keys -X copy-pipe-no-clear "xclip -in -sel primary"

# v in copy-mode goes into selection mode (like vim)
bind-key -T copy-mode-vi v send-keys -X begin-selection
#unbind -T copy-mode-vi Enter
# y in copy mode yanks current selection into clipboard (like vim)
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -selection clipboard -i"
# prefix + P pastes buffer
#bind-key P paste-buffer
bind-key P run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"
# unbind the old ] behaviour (end select mode and paste buffer) as I do it all the time accidentally
unbind ]



# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'



# scratch session via alt+g
bind -n M-g if-shell -F '#{==:#{session_name},scratch}' { 
    detach-client 
  } { 
    if-shell "tmux has-session -t scratch" {
      display-popup -E "tmux attach-session -t scratch"
    } {
      display-popup -E "tmux new-session -d -c '#{pane_current_path}' -s scratch && tmux set-option -t scratch status-position top && tmux set-option -t scratch status-left '#[fg=colour208]█#[fg=black,bg=colour208]#S#[fg=colour208]█' && tmux set-option -t scratch status-right '#[fg=colour208]#{pane_current_path}' && tmux attach-session -t scratch"
    }
}

set -s escape-time 0

#set-option -g automatic-rename-format '#{b:pane_current_path}'


# Hook to trigger window renaming whenever a pane is focused or a command is run
set -g automatic-rename on
set-option -g status-interval 2
#set -g automatic-rename-format "#{pane_current_path}"
set -g status-right '#(bash ~/.tmux/rename_window.sh)'
#
## Run a custom script to handle SSH and folder-based renaming
#set-hook -g pane-focus-in 'run-shell "~/.tmux/rename_window.sh"'
#set-hook -g pane-exited 'run-shell "~/.tmux/rename_window.sh"'

set-hook -ga pane-focus-in 'run-shell ~/.tmux/rename_window.sh'
set-hook -ga pane-focus-out 'run-shell ~/.tmux/rename_window.sh'

